---
title: "Assignment 7 -im"
format: html
---

```{r}

library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel("Old Faithful Geyser Data"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            sliderInput("bins",
                        "Number of bins:",
                        min = 1,
                        max = 50,
                        value = 30)
        ),

        # Show a plot of the generated distribution
        mainPanel(
           plotOutput("distPlot")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {

    output$distPlot <- renderPlot({
        # generate bins based on input$bins from ui.R
        x    <- faithful[, 2]
        bins <- seq(min(x), max(x), length.out = input$bins + 1)

        # draw the histogram with the specified number of bins
        hist(x, breaks = bins, col = 'darkgray', border = 'white',
             xlab = 'Waiting time to next eruption (in mins)',
             main = 'Histogram of waiting times')
    })
}

# Run the application 
shinyApp(ui = ui, server = server)

```

```{r}
# Load required libraries
library(shiny)
library(DBI)
library(RPostgres)
library(ggplot2)

# Define the User Interface (UI)
ui <- fluidPage(
  titlePanel("EPPS6354 Shiny workshop 1: University Database - Instructor Salaries"),
  mainPanel(
    plotOutput("salaryPlot")
  )
)

# Define the Server Logic
server <- function(input, output, session) {
  
  # Establish connection to the PostgreSQL database
  con <- dbConnect(
    RPostgres::Postgres(),
    dbname   = "university",   # Adjust if your database name differs
    host     = "localhost",
    port     = 5432,           # Default PostgreSQL port
    user     = "postgres",     # Your PostgreSQL username
    password = "life123$"     # Your PostgreSQL password
  )
  
  # Ensure the database connection is closed when the session ends
  session$onSessionEnded(function() {
    dbDisconnect(con)
  })
  
  # Reactive expression to fetch average salary by department
  instructor_data <- reactive({
    query <- "SELECT dept_name, AVG(salary) AS avg_salary 
              FROM instructor 
              GROUP BY dept_name;"
    dbGetQuery(con, query)
  })
  
  # Render the plot for average instructor salary by department
  output$salaryPlot <- renderPlot({
    data <- instructor_data()
    
    ggplot(data, aes(x = reorder(dept_name, avg_salary), y = avg_salary)) +
      geom_bar(stat = "identity", fill = "steelblue") +
      theme_minimal() +
      labs(
        title = "Average Instructor Salary by Department",
        x = "Department",
        y = "Average Salary"
      ) +
      theme(
        axis.text.x = element_text(angle = 90, hjust = 1),
        text = element_text(family = "Palatino")
      )
  })
}

# Run the Shiny application
shinyApp(ui = ui, server = server)
```
